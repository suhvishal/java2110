

Language                    library                             framework 

Java                        standard library                    Spring 
                            i.e. collection, util, io       
                            GSON, Jackson, etc.

C#/VB                         .....                             .net 

JavaScript                  jquery, bootstrap, semanticUI       Angular 
                            reactjs, vuejs, etc.

Python 

  |                                 |                           |
Programming                 simplify the tasks              standardize process 
capabilities 


FrontEnd web applications 

    - HTML 
        - "what" contents you want to place on the web page 
        - "define the structure" of web pages 

    - CSS  - cascading style sheet 
        - "how" content should appear on the webpage 
        - "define style rules" for the webpages   

    - JavaScript 
        - provide programming functionalities on webpages 
        - javascript code executes only inside the browser 
                - every browser has a javascript engine which executes js code 
        - introduced in 1997
        - 1997, it was submitted to ECMA for standardization
        - sine then, ECMA keeps publishing diff specifications called
        - and these specifications are implemented by diff browsers 
                - this implementation is called as 'ECMAScript' 
        - 1997      - ES1
        - 1998      - ES2
        - 1999      - ES3
        - 2009      - ES5
        - 2015      - ES6
    
        - using javacript 
            - DOM Manipulation 
            - CSS Manipulation 
            - Calculation/ business logic 
            - event handling 
            - form validations 
            - ajax calls 

    - ES6 / ECMAScript 2015 / Advanced JavaScript 
            - this specification introduced a lot of features in javascript 
                - Arrow functions, spread operators, async and await, generators, classes and objects, 
                - Module System 

    - JQuery 
        - it is javasript library, which simplify some tasks 

    - Bootstrap 
        - provides lot of css classes to create beautiful and responsive web pages 
        - html5+css3+jquery






Others 
    - ReactJS (library)
    - VueJS (library)
    - EmberJS (Framework)

Pre-requisites 

    - JavaScript 
        - it is an interpreted language 
        - it is executed by javascript engine inside the browser
        - it is not type safe 


    - TypeScript 
        - it is developed and maintained by microsoft 
        - it is a superset of javascript/ES6 
        - it has all the features of ES6 + some additional features i.e types, decorators, generics etc. 
        - it is a compiled language i.e. TS code is compiled into JS code (es6)
        - it cannot be executed in the browser


        - hello.ts --------> hello.js 



What is Angular 
    - framework
        - contains modules / libraries 
    - it is managed & maintained by google 

Environment Setup for Angular 
---------------------------------

    1. nodejs 12.x 
        - nodejs comes with a depedency management tools called 'npm'

    2. Editor
            - VS Code 
            - Intellij Idea 
            - Atom 
            - any editor  

    3. angular-cli 
            - command line tool to create/manage angular projects 
            - npm install -g @angular/cli

            > ng --version 


Helloworld angular app 
---------------------------
    > ng new <<nameofapp>>


Angular Framework
---------------------
        @angular/core
        @angular/forms 
        @angular/common 
        @angular/animations
        @angular/platform-browser
        @angular/....



Angular Building Blocks 
--------------------------
    1. Component 
            - this is the most imp building block 
            - Angular applications are made up of Components 
            - component is used to render a 'view' on the page 
            - Component is a typescript class which encapsulates data, view and logic together 
            --** every angular applicatio has at least one Component, usually called as "AppComponent" 

                        app.component.ts 
                        app.component.html 




                header.component.ts 
                ======================                

                    import {Component} from '@angular/core'

                    @Component({
                        selector : 'app-header',
                        templateUrl : 'header-component.html'
                    })
                    class HeaderComponent {
                        //data / fields 

                        //methods / logic 
                    }

                header.component.html
                =======================
                    <div>
                        <p> this is header component </p>
                    </div>


                <app-header> </app-header>      //component is loaded 


                -------------------------------------------------------------------------------------------------------------------
                product.component.ts 
                ======================                

                    import {Component} from '@angular/core'

                    @Component({
                        selector : 'app-product',
                        templateUrl : 'product-component.html'
                    })
                    class ProductComponent {
                        //data / fields 
                        //fieldname

                        //methods / logic 
                    }

                product.component.html
                =======================
                    <div>
                        <p> this is product component </p>
                    </div>


    2. Template 
        - template is the 'view' which is rendered/controlled by component
        - it is made using html  


    3. Module 
    ---------------
            - it is a container to describe/register metadata and  the entities of the applications 
                    i.e. components, directives, services, pipes, etc. etc. 
            - module is also a typescript class 
            -** every angular application has at least one module .. usually called as "AppModule"

            import {NgModule} from '@angular/core'


            @NgModule({
                declarations : [...declare/regiser all components, directives and pipes ]
                imports:[...declare/import all the submodules/othermodules]
                providers : [..declare the services ],
                bootstrap: [...specify which component to bootstrap when the app starts]
            })
            class AppModule{

            }


        4. Directives 
                - used to enhance the view 


        5. Pipes 

        6. Services 


    Angular app directory structure 
    --------------------------------------


            Angular project 
                |
                |-->e2e 
                |   |-> contains end-to-end test cases 
                |
                |-->node_modules
                |   |-> contains all the dependencies 
                |
                |-->src 
                |   |
                |   |-->app
                |   |   |->stores your root module, and component i.e. AppComponent 
                |   |   |->app.component.ts 
                |   |   |->app.component.html
                |   |   |->app.module.ts
                |
                |   |-->assets
                |   |
                |   |
                |   |-->environments
                |   |
                |   |
                |   |-->index.html
                |   |
                |   |
                |   |-->main.ts
                |   |
                |   |
                |   |-->styles.css
                |   |
                |
                |
                |
                |
                |
                |-->angular.json
                |      |-> contains angular application related configuration 
                |
                |-->package.json
                |       |-> lists the dependencies 
                |       |-> configure some scripts to build, start, the app 
                |
                |->tsconfig.json
                |       |-> contains configuration related to typescript 
                |
                |->tslint.json
                |       |-> define rules for syntax
                |

        Create a new component 
        ------------------------
           >  ng generate component Header

           or 

           > ng g c Header 

        
        databinding 
        -------------------
            - communication between component and template 

            1. string interpolation 
                  <h1>  {{ fieldname }}  </h1>

                    - output some text dynamically 
                    - output some text into heading, paragraph, div etc. 

            2. Property binding 
                - <element [domProperty]="fieldname">
                - <img [src]="imageUrl" />

                <input type="text" [value]="fieldname" />

                - is used to bind/assign value of a field (property/datamember in component) 
                        to a domProperty of an element 


            3. event binding 
                    <element (domEvent)="method()" />


                    <button (click)="doSomething()">
                        Show me!
                    </button>


            4. Class binding  - 
                    binding value of a field to the class attribute 

                    <element class="CSS-class" />

                    a. single class binding 

                        <h1 [class.heading]="isActive"> This is Navbar </h1>

            5. custom data binding 
            -----------------------
                    - passing data to child component 
                    - using @Input() 

            6. custom event binding 

                    - to emit custom events 
                    - pass data from child to parent using custom event 


    Directives 
    ----------------- 
        - attribute directive 
                - to enhance the view 
                - modify the behavior of html elements, attributes, or properties and components 

                [ngClass]
                        - to add / remove css class/es dynamically

                [ngStyle]
                        - to add /remove css styles to html elements 

                [ngModel]
                        - bind a value of a field to a form element and vice versa 


                <element [attributeDirective]="value">

                <element [ngClass]="fieldName"> 

        - structural directive 
                - to make changes in the structure of dom 
                - DOM manipulation
                    i.e. - hide/show view elements 
                         - repeat elements 

                - *ngIf
                ---------
                    <div *ngIf="boolean-expression;else errMessage">
                            This div tag is visible if only the condition true 
                    </div>

                    <ng-template #errMessage>
                        <p>This is visible in else case</p>
                    </ng-template>


                - *ngFor
                ------------

                        someArray = [item1, item2, item3, item4, item5,....]

                        <element *ngFor="let value of someArray">
                                //some content 
                        </element>

        - component directive 
            - to render a view on the page 
                <app-header>
                <app-productlist>
                <app-navbar>


        Custom attribute directive 
        -------------------------------

                - class that obtains the reference of the host element and enhanecs the element 

                <h1 highlight> ....... </h1>


                import {ElementRef} from '@angular/core';

                @Directive({
                    selector: '[highlight]'
                })
                class HighLightDirective {

                        constructor(private eleRef: ElementRef){

                        }

                }



        custom structural directive 
        ---------------------------



        Working with forms
        ----------------------

                - angular has a library called @angular/forms to help you handling forms 
                - this library has few modules 
                            FormsModule     
                            ReactiveFormsModule
                    - both the modules contains some predefined directives, services, classes etc.
                - the @angular/forms library provides some useful classes/objects to handle the forms 
                    i.e. FormGroup object 
                                - used to track and validate group of FormControl objects 
                                - it has below properties 
                                        - valid 
                                        - value 
                                        - errors 
                                        - touched 
                                        - dirty 
                                        -.... 
                         FormControl object  
                                - used to track and validate value of an individual form element 
                                            i.e. textfield, textbox, checkbox, radio button etc.
                                - it has below properties 
                                        - valid 
                                        - value 
                                        - errors 
                                        - touched 
                                        - dirty 
                                        -.... 

                There are two approaches to handle the forms 

                        1. Template driven forms 
                                - FormGroup, FormControl and some other objects are created automatically/implicitely 
                                    just by adding some directive in the template 

                                - good for simple forms with basic validation 
                                - easy to create 

                                - ie. 
                                    <form> </form>

                                    <form ngFrom> </form>

                                    <form #myForm="ngForm"> </form>

                        2. Reactive form
                                - FormGroup, FormControl and other objects are created explicitely using some code in the component 
                                - good complex forms with custom validation 
                                - well testable 


                       
                        new FormControl(formState: any = null, 
                                        validatorOrOpts?: ValidatorFn | AbstractControlOptions | ValidatorFn[], 
                                        asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[])


                        new FormControl('', [Validators.required, Validators.minlenght(6)])