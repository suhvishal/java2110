JDBC 
-----------
    - too many sql statements
    - complex sql statements
    - 


java object model 
------------------------



database relational model
----------------------------


hibernate 
----------
    - ORM (object relational mapping) TOOL 
    - to map java classes to database tables 
    - you can perform the CRUD operations without sql 
    - hibernate provides HQL - hibernate query language, which represents object oriented query
    - hibernate.cfg.xml file to configure db related properties 

other ORM tools 
-----------------
    - toplink 
    - ibatis 
    - ...
    - ...

JPA 
--------
    - java persistent api 
    - it is specification / standard that every ORM tool is supposed to follow 

JPA provider
----------------
    - ORM tool which implements jpa standards 
    - hibernate jpa 
    - eclipselink
    - mybatis 

hibernate jpa 
---------------
    - hibernate implementation of JPA 
    - the configuration related to db can be made external using an xml file
        - persistence.xml


Entity 
---------------
    - an object which is managed by hibernate-jpa is called as Entity 
    - managed object 
    - Entity class is mapped with the database table 

    - Entity class 
            - must have a no-arg constructor 
            - getter/setter methods for  the members 
            - must be annotated with @Entity annotation 
            - must have an identifier column marked using @Id annotation 


Session Factory (hibernate)
------------------
    - SessionFactory loads the hibernate configuration (hibernate.cfg.xml file)
            - it analyzes the mapping and creates connection to the db 

    - Session factory is used to create 'Session' object 
    - 'Session' object is  used to manged entities 
            - 'Session' object is obtained only using SessionFactory object 

1. create maven project 
2. add dependencies 
        - hibernate-core 
        - mysql-connector 
3. create the Entity class 
        - Employee 


            @Entity
            public class Employee {

                @Id
                private Long id;
                
                private String eName;
                private String city;
                private double salary;

                //constructor
                //getter/setters
            }
4. create hibernate configuration file in src/java/resources folder 

        - hibernate.cfg.xml 

        <?xml version = "1.0" encoding = "utf-8"?>
        <!DOCTYPE hibernate-configuration SYSTEM 
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

        <hibernate-configuration>
            <session-factory>
                <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
                <property name="connection.url">jdbc:mysql://localhost:3306/mydb</property>
                <property name="connection.username">root</property>
                <property name="connection.password">suhroot123</property>
                <mapping class="com.zycus.entities.Employee"/>
            </session-factory>
        </hibernate-configuration>

5. persist the entities using SessionFactory 


    Entities 
    -----------



    Hibernate Jpa 
    ----------------
        - EnitityManagerFactory
                - loads the configuration from persistence.xml file 
                - we can object an object of EntityManager using EnitityManagerFactory


                EnitityManagerFactory factory = Persistence.createEntityManagerFactory("punit-name");
                EntityManager em = factory.createEntityManager() 


        - EntityManager
                - object, which manages the entities / persists the entities 


    Default Entity Mapping 
    ---------------------
        - the table name in the db will be same as Entity class name 
        - all the fields of the entity class will be mapped to table columns as per default mapping 
        - by default all the attributes/fields of the entity are persisted 

                String          ==> VARCHAR(255)

    Custom mapping 
    ------------------
            @Table(name="t_author")
            @Column(name="somename")
            @Transient



    Entity Relationship 
    ---------------------
        - ENTITY class can have association with other class 
        - in java the relationship is represented using 'association'
        - in rdbms the relationship is represented using referential integrity 

        class Book {
            id;
            title;
            noOfPage;
            
            Author author;          //association

        }

        class Author {
            id;
            name;
            age;

            Set<Book> books;
        }


        Book ------has one-----------> Author 
        OneToOne


        Author ---- has many -------> books
        OneToMany 


            OneToOne            JoinColumn 
            ManyToOne           JoinColumn 


            OneToMany           JoinTable       
            ManyToMany          JoinTable  


    Entity Inheritance 

    Quering the entities
    ------------------------
            - 1. HQL 
            -------------


            - 2. JPQL 
            ------------
                SQL:        SELECT * FROM Author 


                JPQL:       SELECT a              
                            FROM                 
                            Author a            

            - named queries 
            - criteria query 
            
            - query method (Spring data jpa)
            - querydsl (3rd party library)

    -----------------------------------------------------------------


    Spring Framework / Spring 
    -----------------------------------

        - spring makes your applications light weight and loosely coupled 
        - spring is powerful, mature, highly flexible framework 

        - decouples the execution of tasks from its implementation
        - makes it easier to switch between diff implementation
        - greater modularity of a program 
        - 


        - Spring Core 
                - IOC Container 
                - depedency injection 
                - Bean Definition 
                - data binding 
                - validation etc. 

        - Spring MVC 
                - used to create web applications (server side web applications )
                - supports diff view engines for UI/frontEnds
                        i.e. jsp, thymeleaf, velocity, wicket, jade, etc. 
                - also create web servies (REST webservices / XML webservices )

                - WebServices 
                    - it is a service / app / api which returns data in the form of xml 

                - REST
                     - it is a service / app / api which returns data in the form of json 
 
            
        - Spring data
                - jdbctemplate : abstraction over jdbc 
                - spring data jpa : abstraction over jpa 

        - Spring Data Rest
        - Spring Boot 
            - autoconfiguration 
            - actuator 

        - Spring Security 
        - Spring Cloud 
        - .....



        IOC - Inversion of control 
        ------------------------------
                - java applications are made up of several 'objects'
                - delegates the responsibility of creating the objects to container 

        Container
        ----------------
            - container is a class in spring, which is responsible to create objects based on some configuration 
            - this configuration can be made external using xml, java or annotations 
            - in spring, the container is represented by the interface 'ApplicationContext'

            ApplicationContext (interface)
                    |
                    |-> ClassPathXmlApplicationContext 
                    |-> AnnotationConfigApplicationContext 
            -------------------------------------------------------------------------------------
            WebApplicationContext (interface)                               ConfigurableApplicationContext (interface)
                    |
                    |-> AnnotationConfigWebApplicationContext

        Dependency Injection 
        ------------------------
                - injecting objects into another objects 



        Spring Beans 
        --------------
            - the object which is managed by spring IOC container is called as 'spring bean' 
            - a spring bean is an object that is instantiated / assembled / managed by IOC container 

        Spring Bean Definitions
        ----------------------------
            - instructs the IOC container to manage the objects 

                1. using xml 
                        <beans>

                            <bean id="employeeDAO" class="com.zycus.dao.EmployeeDAO"> 
                                    //configuration for initialization
                            </bean>
                           
                        </beans>

                2. using java 

                    public class MyConfiguration {
	
                            @Bean
                            public EmployeeDAO getEmployeeDAO() {
                                return new EmployeeDAO();
                            }

                    }

                3. using annotations 
                            @Component 
                            @Service
                            @Repository
                            @Controller 


            2. Bean initialization 
            ------------------------------  
                 - no-arg constructor -----> setter methods 
                a. Constructor injection 

                            <bean id="" class="">
                                    <constructor-arg>
                                            <value>xxxx</value>
                                    </constructor-arg>

                                    <constructor-arg value="xxxx" />

                            </bean>   

                b. setter injection 
                        <property>

                        </property>

            3. Post Initialization & pre destroy 
            --------------------------------------------        
                    - sometimes we want to intialize resources / and after initialization we want to perform some validation
                    - provide post-initialization method and pre-destroy method in bean life cycle 

                    1. by implementing InitializationBean & DisposableBean interface 

                    2. @PostConstruct and @PreDestroy 

            4. Bean Scopes 
            --------------------
                    1. singleton 

                    2. prototype 

                    3. request 

                    4. session 

                    5. application 



        JPA 
            - specification / standard for ORM tools 

        JPA Providers 
            - ORM tools who implements JPA Standard / specification
            - i.e Hibernate (JPA), eclipselink, mybatis etc. 

        Spring Data JPA 
            - abstraction over JPA 
            - provider an extra layer with some boilerplate code to perform persistence operations 


                    interface Repository<T, ID>
                        |
                        |--> this is marker interface, it has no methods 
                        |
                        |
                    interface CrudRepository<T, ID>
                        |
                        |-> void delete(t entity)
                        |-> void deleteAll()
                        |-> long count()
                        |-> Optional<T> findById(ID id)
                        |-> Iterable<T> findAll()
                        |-> <? extends T> save(T entity)
                        |
                        |
                    interface PagingAndSortingRepository<T, ID>
                        |
                        |-> Page<T> findAll(Pageable pageable)
                        |-> Iterable<T> findAll(Sort sort)
                        |
                        |
                    interface JpaRepository<T, ID>
                        |
                        |-> saveAll(Iterable<T> list)
                        |-> findAll(Example example)  




interface EmployeeRepository extends PagingAndSortingRepository<T, ID>

interface EmployeeRepository extends JpaRepository<T, ID>


Spring MVC 
-------------------

    - DispatcherServlet 
        - Entry point 
        - delegates the request to appropriate controllers 

    - Controller
        - to handle the actual request and create response 

    - Request Mapping 
        - mapping a hander method for a specific request on a specific url 
        - specify URL + REquest type + handler method 

    - ViewResolver 
        - locates the view to serve 
        - it uses appropriate viewengine to create the 'view' to be sent to the client 
        - used to find a template / jsp page / html page etc. 
        
         


    JDBC 
        - lot of code 
        - lot of sql queries 

    JDBCTEMPLATE 
        - eliminates the code complexity of jdbc 
        - it just simplifies jdbc operations 
        - but, it uses SQL 

        - lot of sql queries 

    ORM Tools i.e.  Hibernate / Ibatis / toplink 
        - ORM tools 
        - object mapped with db table 
        - OBJECT oriented queries i,e., HQL 
        - 
        - 

    JPA 
        - specification / standard for ORM 

    JPA Providers 
        - ORM tool which implements JPA specification / STANDARD 
        - i.e. HIbernate Jpa / mybatis / eclipselink etc. 

    Spring data jpa 
        - providers abstraction over jpa 
        - providers boilerplate code 






            @Query(query="select e from Employee e WHERE ... ")






    java reflection api 

    creating custom proxy objects using java 

    creating proxy objects using spring 

    creating proxy objects using AOP 







    class Emplooyee {

        public String pubField;
        private String privateField;

        public void someMethod(){

        }

        private void showEmp(){
            //
        }
    }

    //new keyword 